"""
Âá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Çø„Éº„É¢„Ç∏„É•„Éº„É´
ÁµêÊûú„ÇíÊßò„ÄÖ„Å™ÂΩ¢Âºè„ÅßÂá∫Âäõ„ÉªË°®Á§∫„Éª„Ç≥„Éî„Éº
"""

import json
import csv
import os
from datetime import datetime
from typing import List, Dict
from tabulate import tabulate
try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False
    print("Ë≠¶Âëä: pyperclip„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâÊ©üËÉΩ„ÅØÁÑ°Âäπ„Åß„Åô")


class OutputFormatter:
    def __init__(self, output_dir: str = "output"):
        self.output_dir = output_dir
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
    
    def display_results(self, results: List[Dict]):
        """
        ÁµêÊûú„ÇíË¶ã„ÇÑ„Åô„ÅÑË°®ÂΩ¢Âºè„Åß„Çø„Éº„Éü„Éä„É´„Å´Ë°®Á§∫ÔºàÁ∞°ÊòìÁâàÔºâ
        """
        if not results:
            print("\nÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
            return
        
        print("\n" + "=" * 120)
        print(" Ê§úÁ¥¢ÁµêÊûúÔºàÊ¶ÇË¶ÅÔºâ")
        print("=" * 120 + "\n")
        
        # Á∞°ÊòìË°®ÂΩ¢Âºè„ÅßË°®Á§∫
        table_data = []
        for i, row in enumerate(results, 1):
            table_data.append([
                i,
                row.get('‰ºÅÊ•≠Âêç', '')[:20],
                row.get('ÂæìÊ•≠Âì°Ë¶èÊ®°', '-'),
                row.get('Â£≤‰∏ä', '-')[:15],
                row.get('‰∫ãÊ•≠È†òÂüü', '-')[:25],
                row.get('„Ç≠„Éº„Éû„É≥Ê∞èÂêç', ''),
                row.get('ÂΩπËÅ∑Âêç', '')[:15]
            ])
        
        headers = ['#', '‰ºÅÊ•≠Âêç', 'ÂæìÊ•≠Âì°', 'Â£≤‰∏ä', '‰∫ãÊ•≠È†òÂüü', 'Ê∞èÂêç', 'ÂΩπËÅ∑']
        print(tabulate(table_data, headers=headers, tablefmt='grid'))
        
        print(f"\nÂêàË®à: {len(results)} ‰ª∂\n")
    
    def display_detailed_results(self, results: List[Dict]):
        """
        ÁµêÊûú„ÇíË©≥Á¥∞ÂΩ¢Âºè„ÅßË°®Á§∫
        """
        if not results:
            print("\nÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
            return
        
        print("\n" + "=" * 120)
        print(" Ë©≥Á¥∞„Å™Ê§úÁ¥¢ÁµêÊûú")
        print("=" * 120)
        
        current_company = None
        company_count = 0
        
        for i, row in enumerate(results, 1):
            company_name = row.get('‰ºÅÊ•≠Âêç', '')
            
            # ‰ºÅÊ•≠„ÅåÂ§â„Çè„Å£„Åü„ÇâÂå∫Âàá„ÇäÁ∑ö„ÇíË°®Á§∫
            if company_name != current_company:
                company_count += 1
                current_company = company_name
                print(f"\n{'‚îÄ' * 120}")
                print(f"‚ñ† ‰ºÅÊ•≠ {company_count}: {company_name}")
                print(f"{'‚îÄ' * 120}")
                print(f"  üåê URL        : {row.get('‰ºÅÊ•≠URL', '')}")
                print(f"  üìÖ Ë®≠Á´ãÂπ¥     : {row.get('Ë®≠Á´ãÂπ¥', '-')}")
                print(f"  üí∞ Â£≤‰∏ä       : {row.get('Â£≤‰∏ä', '-')}")
                print(f"  üìä Âà©Áõä       : {row.get('Âà©Áõä', '-')}")
                print(f"  üë• ÂæìÊ•≠Âì°Ë¶èÊ®° : {row.get('ÂæìÊ•≠Âì°Ë¶èÊ®°', '-')}")
                print(f"  üè¢ ‰∫ãÊ•≠È†òÂüü   : {row.get('‰∫ãÊ•≠È†òÂüü', '-')}")
                print(f"  üéØ Ê≥®Âäõ„Éù„Ç§„É≥„Éà: {row.get('Ê≥®Âäõ„Éù„Ç§„É≥„Éà', '-')}")
                print(f"  üìù Ê¶ÇË¶Å       : {row.get('‰∫ãÊ•≠Ê¶ÇË¶Å', '')[:150]}...")
                print(f"\n  „ÄêÂΩπÂì°„ÉªË≤¨‰ªªËÄÖ‰∏ÄË¶ß„Äë")
            
            # ÂΩπÂì°„ÉªË≤¨‰ªªËÄÖÊÉÖÂ†±„ÇíË°®Á§∫
            print(f"\n  {i}. {row.get('„Ç≠„Éº„Éû„É≥Ê∞èÂêç', '')} ({row.get('ÂΩπËÅ∑Âêç', '')})")
            print(f"     üìò Facebook : {row.get('Facebook URL', '„Å™„Åó')}")
            print(f"     üê¶ X/Twitter: {row.get('XÔºàÊóßTwitterÔºâ URL', '„Å™„Åó')}")
        
        print(f"\n{'=' * 120}\n")
        print(f"ÂêàË®à: {len(results)} ‰ª∂„ÅÆÂΩπÂì°„ÉªË≤¨‰ªªËÄÖÊÉÖÂ†±\n")
    
    def copy_to_clipboard(self, results: List[Dict], format_type: str = 'tsv') -> bool:
        """
        ÁµêÊûú„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº
        
        Args:
            results: ÁµêÊûú„Éá„Éº„Çø
            format_type: „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÁ®ÆÂà• ('tsv', 'csv', 'markdown', 'json')
        
        Returns:
            ÊàêÂäü„Åó„Åü„Åã„Å©„ÅÜ„Åã
        """
        if not CLIPBOARD_AVAILABLE:
            print("\n‚ö†Ô∏è  „ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅpyperclip„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:")
            print("   pip install pyperclip")
            return False
        
        if not results:
            print("\n„Ç≥„Éî„Éº„Åô„ÇãÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
            return False
        
        try:
            if format_type == 'tsv':
                content = self._format_as_tsv(results)
            elif format_type == 'csv':
                content = self._format_as_csv_string(results)
            elif format_type == 'markdown':
                content = self._format_as_markdown(results)
            elif format_type == 'json':
                content = json.dumps(results, ensure_ascii=False, indent=2)
            else:
                content = self._format_as_tsv(results)
            
            pyperclip.copy(content)
            print(f"\n‚úì {format_type.upper()}ÂΩ¢Âºè„Åß„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ")
            print(f"  Excel„ÄÅGoogle Sheets„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø„Å™„Å©„Å´Ë≤º„Çä‰ªò„Åë„Åß„Åç„Åæ„Åô„ÄÇ")
            return True
        
        except Exception as e:
            print(f"\n‚úó „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å∏„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            return False
    
    def _format_as_tsv(self, results: List[Dict]) -> str:
        """
        TSVÔºà„Çø„ÉñÂå∫Âàá„ÇäÔºâÂΩ¢Âºè„Å´Â§âÊèõÔºàExcel„Å´Áõ¥Êé•Ë≤º„Çä‰ªò„ÅëÂèØËÉΩÔºâ
        """
        lines = []
        # „Éò„ÉÉ„ÉÄ„Éº
        headers = [
            '‰ºÅÊ•≠Âêç', '‰ºÅÊ•≠URL', '‰∫ãÊ•≠Ê¶ÇË¶Å', 'Ë®≠Á´ãÂπ¥', 'Â£≤‰∏ä', 'Âà©Áõä', 
            'ÂæìÊ•≠Âì°Ë¶èÊ®°', '‰∫ãÊ•≠È†òÂüü', 'Ê≥®Âäõ„Éù„Ç§„É≥„Éà',
            '„Ç≠„Éº„Éû„É≥Ê∞èÂêç', 'ÂΩπËÅ∑Âêç', 'Facebook URL', 'XÔºàÊóßTwitterÔºâ URL'
        ]
        lines.append('\t'.join(headers))
        
        # „Éá„Éº„Çø
        for row in results:
            line = '\t'.join([
                row.get('‰ºÅÊ•≠Âêç', ''),
                row.get('‰ºÅÊ•≠URL', ''),
                row.get('‰∫ãÊ•≠Ê¶ÇË¶Å', ''),
                row.get('Ë®≠Á´ãÂπ¥', ''),
                row.get('Â£≤‰∏ä', ''),
                row.get('Âà©Áõä', ''),
                row.get('ÂæìÊ•≠Âì°Ë¶èÊ®°', ''),
                row.get('‰∫ãÊ•≠È†òÂüü', ''),
                row.get('Ê≥®Âäõ„Éù„Ç§„É≥„Éà', ''),
                row.get('„Ç≠„Éº„Éû„É≥Ê∞èÂêç', ''),
                row.get('ÂΩπËÅ∑Âêç', ''),
                row.get('Facebook URL', ''),
                row.get('XÔºàÊóßTwitterÔºâ URL', '')
            ])
            lines.append(line)
        
        return '\n'.join(lines)
    
    def _format_as_csv_string(self, results: List[Dict]) -> str:
        """
        CSVÂΩ¢Âºè„ÅÆÊñáÂ≠óÂàó„Å´Â§âÊèõ
        """
        import io
        output = io.StringIO()
        
        if results:
            fieldnames = [
                '‰ºÅÊ•≠Âêç', '‰ºÅÊ•≠URL', '‰∫ãÊ•≠Ê¶ÇË¶Å', 'Ë®≠Á´ãÂπ¥', 'Â£≤‰∏ä', 'Âà©Áõä',
                'ÂæìÊ•≠Âì°Ë¶èÊ®°', '‰∫ãÊ•≠È†òÂüü', 'Ê≥®Âäõ„Éù„Ç§„É≥„Éà',
                '„Ç≠„Éº„Éû„É≥Ê∞èÂêç', 'ÂΩπËÅ∑Âêç', 'Facebook URL', 'XÔºàÊóßTwitterÔºâ URL'
            ]
            writer = csv.DictWriter(output, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(results)
        
        return output.getvalue()
    
    def _format_as_markdown(self, results: List[Dict]) -> str:
        """
        MarkdownË°®ÂΩ¢Âºè„Å´Â§âÊèõ
        """
        lines = []
        # „Éò„ÉÉ„ÉÄ„Éº
        lines.append("| ‰ºÅÊ•≠Âêç | Ë®≠Á´ãÂπ¥ | Â£≤‰∏ä | ÂæìÊ•≠Âì° | ‰∫ãÊ•≠È†òÂüü | Ê≥®Âäõ„Éù„Ç§„É≥„Éà | Ê∞èÂêç | ÂΩπËÅ∑ | Facebook | X/Twitter |")
        lines.append("|--------|--------|------|--------|----------|--------------|----------|------|----------|-----------|")
        
        # „Éá„Éº„Çø
        for row in results:
            line = "| {} | {} | {} | {} | {} | {} | {} | {} | {} | {} |".format(
                row.get('‰ºÅÊ•≠Âêç', ''),
                row.get('Ë®≠Á´ãÂπ¥', '-'),
                row.get('Â£≤‰∏ä', '-'),
                row.get('ÂæìÊ•≠Âì°Ë¶èÊ®°', '-'),
                row.get('‰∫ãÊ•≠È†òÂüü', '-'),
                row.get('Ê≥®Âäõ„Éù„Ç§„É≥„Éà', '')[:30] + '...' if len(row.get('Ê≥®Âäõ„Éù„Ç§„É≥„Éà', '')) > 30 else row.get('Ê≥®Âäõ„Éù„Ç§„É≥„Éà', '-'),
                row.get('„Ç≠„Éº„Éû„É≥Ê∞èÂêç', ''),
                row.get('ÂΩπËÅ∑Âêç', ''),
                row.get('Facebook URL', '-'),
                row.get('XÔºàÊóßTwitterÔºâ URL', '-')
            )
            lines.append(line)
        
        return '\n'.join(lines)
    
    def save_as_csv(self, results: List[Dict], filename: str = None) -> str:
        """
        CSVÂΩ¢Âºè„Åß‰øùÂ≠ò
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sales_leads_{timestamp}.csv"
        
        filepath = os.path.join(self.output_dir, filename)
        
        if results:
            fieldnames = [
                '‰ºÅÊ•≠Âêç', '‰ºÅÊ•≠URL', '‰∫ãÊ•≠Ê¶ÇË¶Å', 'Ë®≠Á´ãÂπ¥', 'Â£≤‰∏ä', 'Âà©Áõä',
                'ÂæìÊ•≠Âì°Ë¶èÊ®°', '‰∫ãÊ•≠È†òÂüü', 'Ê≥®Âäõ„Éù„Ç§„É≥„Éà',
                '„Ç≠„Éº„Éû„É≥Ê∞èÂêç', 'ÂΩπËÅ∑Âêç', 'Facebook URL', 'XÔºàÊóßTwitterÔºâ URL'
            ]
            
            with open(filepath, 'w', newline='', encoding='utf-8-sig') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(results)
        
        return filepath
    
    def save_as_json(self, results: List[Dict], filename: str = None) -> str:
        """
        JSONÂΩ¢Âºè„Åß‰øùÂ≠ò
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sales_leads_{timestamp}.json"
        
        filepath = os.path.join(self.output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as jsonfile:
            json.dump(results, jsonfile, ensure_ascii=False, indent=2)
        
        return filepath
    
    def save_as_markdown(self, results: List[Dict], filename: str = None) -> str:
        """
        MarkdownÂΩ¢Âºè„Åß‰øùÂ≠ò
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sales_leads_{timestamp}.md"
        
        filepath = os.path.join(self.output_dir, filename)
        
        markdown_content = self._format_as_markdown(results)
        
        with open(filepath, 'w', encoding='utf-8') as mdfile:
            mdfile.write(f"# Âñ∂Ê•≠„É™„Çπ„Éà - {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó•')}\n\n")
            mdfile.write(f"ÂêàË®à: {len(results)} ‰ª∂\n\n")
            mdfile.write(markdown_content)
        
        return filepath
    
    def show_copy_menu(self, results: List[Dict]):
        """
        „Ç≥„Éî„Éº„É°„Éã„É•„Éº„ÇíË°®Á§∫
        """
        print("\n" + "=" * 100)
        print(" „Ç≥„Éî„Éº„Éª‰øùÂ≠ò„Ç™„Éó„Ç∑„Éß„É≥")
        print("=" * 100)
        print("\n1. TSVÂΩ¢Âºè„Åß„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„ÉºÔºàExcel/Sheets„Å´Áõ¥Êé•Ë≤º„Çä‰ªò„ÅëÂèØÔºâ")
        print("2. MarkdownÂΩ¢Âºè„Åß„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„ÉºÔºàNotion„ÇÑGitHub„Å™„Å©„Åß‰ΩøÁî®Ôºâ")
        print("3. JSONÂΩ¢Âºè„Åß„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„ÉºÔºà„Éó„É≠„Ç∞„É©„É†„ÅßÂá¶ÁêÜ„Åô„ÇãÂ†¥ÂêàÔºâ")
        print("4. CSVÂΩ¢Âºè„Åß„Éï„Ç°„Ç§„É´‰øùÂ≠ò")
        print("5. JSONÂΩ¢Âºè„Åß„Éï„Ç°„Ç§„É´‰øùÂ≠ò")
        print("6. MarkdownÂΩ¢Âºè„Åß„Éï„Ç°„Ç§„É´‰øùÂ≠ò")
        print("7. „Åô„Åπ„Å¶„ÅÆÂΩ¢Âºè„Åß‰øùÂ≠ò")
        print("0. „Çπ„Ç≠„ÉÉ„Éó")
        
        choice = input("\nÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (0-7): ").strip()
        
        if choice == '1':
            self.copy_to_clipboard(results, 'tsv')
        elif choice == '2':
            self.copy_to_clipboard(results, 'markdown')
        elif choice == '3':
            self.copy_to_clipboard(results, 'json')
        elif choice == '4':
            filepath = self.save_as_csv(results)
            print(f"\n‚úì CSV‰øùÂ≠òÂÆå‰∫Ü: {filepath}")
        elif choice == '5':
            filepath = self.save_as_json(results)
            print(f"\n‚úì JSON‰øùÂ≠òÂÆå‰∫Ü: {filepath}")
        elif choice == '6':
            filepath = self.save_as_markdown(results)
            print(f"\n‚úì Markdown‰øùÂ≠òÂÆå‰∫Ü: {filepath}")
        elif choice == '7':
            csv_path = self.save_as_csv(results)
            json_path = self.save_as_json(results)
            md_path = self.save_as_markdown(results)
            print(f"\n‚úì „Åô„Åπ„Å¶„ÅÆÂΩ¢Âºè„Åß‰øùÂ≠òÂÆå‰∫Ü:")
            print(f"  - CSV: {csv_path}")
            print(f"  - JSON: {json_path}")
            print(f"  - Markdown: {md_path}")
        elif choice == '0':
            print("\n„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü„ÄÇ")
        else:
            print("\nÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ")

